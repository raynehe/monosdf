train{
    expname = fluid_mlp
    dataset_class = datasets.scene_dataset.SceneDatasetDN
    model_class = model.network.MonoSDFNetwork
    loss_class = model.loss.MonoSDFLoss
    learning_rate = 5.0e-4
    lr_factor_for_grid = 1.0
    num_pixels = 1024
    checkpoint_freq = 10
    plot_freq = 10
    split_n_pixels = 1000
}
plot{
    plot_nimgs = 1
    resolution = 100
    grid_boundary = [-5.5, 5.5]
}
loss{
    rgb_loss = torch.nn.L1Loss
    eikonal_weight = 0.1
    smooth_weight = 0.0
    depth_weight = 0.0
    normal_l1_weight = 0.001
    normal_cos_weight = 0.0
    end_step = 25600
}
dataset{
    data_dir = fluid
    img_res = [384, 384]
    scan_id = 4
    center_crop_type = center_crop_for_fluid
    data_type = splishsplash
}
model{
    feature_vector_size = 256
    scene_bounding_sphere = 11
    white_bkgd = True

    Grid_MLP = True
    implicit_network
    {
        position_encoding_size = 195
        d_in = 3
        d_out = 1
        dims = [ 256, 256, 256, 256, 256, 256, 256, 256 ]
        geometric_init = True
        bias = 0.6
        skip_in = [4]
        weight_norm = True
        multires = 0
        use_grid_feature = False
        divide_factor = 5.0 # 1.5 for replica, 6 for dtu, 3.5 for tnt, 1.5 for bmvs, we need it to normalize the points range for multi-res grid
        NN_search
        {
            fix_radius = True
            particle_radius = 0.025
            search_radius_scale = 9.0
            N_neighbor = 20
        }
        encoding{
            density = True
            var = True
            smoothed_pos = True
            smoothed_dir = True
            exclude_ray = True
            same_smooth_factor = False
        }
    }
    rendering_network
    {
        position_encoding_size = 195
        dir_encoding_size = 54
        normal_size = 3
        mode = idr
        d_in = 3
        d_out = 3
        dims = [ 256, 256, 256, 256]
        NN_search
        {
            fix_radius = True
            particle_radius = 0.025
            search_radius_scale = 9.0
            N_neighbor = 20
        }
        encoding{
            density = True
            var = True
            smoothed_pos = True
            smoothed_dir = True
            exclude_ray = True
            same_smooth_factor = False
        }
        weight_norm = True
        multires_view = 0
    }
    density
    {
        params_init{
            beta = 0.1
        }
        beta_min = 0.0001
    }
    ray_sampler
    {
        near = 9.0
        far = 13.0
        # near = 0.0
        N_samples = 64
        N_samples_eval = 128
        N_samples_extra = 32
        eps = 0.1
        beta_iters = 10
        max_total_iters = 5
    }
}
